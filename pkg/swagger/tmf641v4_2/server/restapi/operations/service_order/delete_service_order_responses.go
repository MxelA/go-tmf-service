// Code generated by go-swagger; DO NOT EDIT.

package service_order

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"github.com/MxelA/tmf-service-go/pkg/swagger/tmf641v4_2/server/models"
)

// DeleteServiceOrderNoContentCode is the HTTP code returned for type DeleteServiceOrderNoContent
const DeleteServiceOrderNoContentCode int = 204

/*
DeleteServiceOrderNoContent Deleted

swagger:response deleteServiceOrderNoContent
*/
type DeleteServiceOrderNoContent struct {
}

// NewDeleteServiceOrderNoContent creates DeleteServiceOrderNoContent with default headers values
func NewDeleteServiceOrderNoContent() *DeleteServiceOrderNoContent {

	return &DeleteServiceOrderNoContent{}
}

// WriteResponse to the client
func (o *DeleteServiceOrderNoContent) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.Header().Del(runtime.HeaderContentType) //Remove Content-Type on empty responses

	rw.WriteHeader(204)
}

// DeleteServiceOrderBadRequestCode is the HTTP code returned for type DeleteServiceOrderBadRequest
const DeleteServiceOrderBadRequestCode int = 400

/*
DeleteServiceOrderBadRequest Bad Request

swagger:response deleteServiceOrderBadRequest
*/
type DeleteServiceOrderBadRequest struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewDeleteServiceOrderBadRequest creates DeleteServiceOrderBadRequest with default headers values
func NewDeleteServiceOrderBadRequest() *DeleteServiceOrderBadRequest {

	return &DeleteServiceOrderBadRequest{}
}

// WithPayload adds the payload to the delete service order bad request response
func (o *DeleteServiceOrderBadRequest) WithPayload(payload *models.Error) *DeleteServiceOrderBadRequest {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the delete service order bad request response
func (o *DeleteServiceOrderBadRequest) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *DeleteServiceOrderBadRequest) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(400)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// DeleteServiceOrderUnauthorizedCode is the HTTP code returned for type DeleteServiceOrderUnauthorized
const DeleteServiceOrderUnauthorizedCode int = 401

/*
DeleteServiceOrderUnauthorized Unauthorized

swagger:response deleteServiceOrderUnauthorized
*/
type DeleteServiceOrderUnauthorized struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewDeleteServiceOrderUnauthorized creates DeleteServiceOrderUnauthorized with default headers values
func NewDeleteServiceOrderUnauthorized() *DeleteServiceOrderUnauthorized {

	return &DeleteServiceOrderUnauthorized{}
}

// WithPayload adds the payload to the delete service order unauthorized response
func (o *DeleteServiceOrderUnauthorized) WithPayload(payload *models.Error) *DeleteServiceOrderUnauthorized {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the delete service order unauthorized response
func (o *DeleteServiceOrderUnauthorized) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *DeleteServiceOrderUnauthorized) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(401)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// DeleteServiceOrderForbiddenCode is the HTTP code returned for type DeleteServiceOrderForbidden
const DeleteServiceOrderForbiddenCode int = 403

/*
DeleteServiceOrderForbidden Forbidden

swagger:response deleteServiceOrderForbidden
*/
type DeleteServiceOrderForbidden struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewDeleteServiceOrderForbidden creates DeleteServiceOrderForbidden with default headers values
func NewDeleteServiceOrderForbidden() *DeleteServiceOrderForbidden {

	return &DeleteServiceOrderForbidden{}
}

// WithPayload adds the payload to the delete service order forbidden response
func (o *DeleteServiceOrderForbidden) WithPayload(payload *models.Error) *DeleteServiceOrderForbidden {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the delete service order forbidden response
func (o *DeleteServiceOrderForbidden) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *DeleteServiceOrderForbidden) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(403)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// DeleteServiceOrderNotFoundCode is the HTTP code returned for type DeleteServiceOrderNotFound
const DeleteServiceOrderNotFoundCode int = 404

/*
DeleteServiceOrderNotFound Not Found

swagger:response deleteServiceOrderNotFound
*/
type DeleteServiceOrderNotFound struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewDeleteServiceOrderNotFound creates DeleteServiceOrderNotFound with default headers values
func NewDeleteServiceOrderNotFound() *DeleteServiceOrderNotFound {

	return &DeleteServiceOrderNotFound{}
}

// WithPayload adds the payload to the delete service order not found response
func (o *DeleteServiceOrderNotFound) WithPayload(payload *models.Error) *DeleteServiceOrderNotFound {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the delete service order not found response
func (o *DeleteServiceOrderNotFound) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *DeleteServiceOrderNotFound) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(404)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// DeleteServiceOrderMethodNotAllowedCode is the HTTP code returned for type DeleteServiceOrderMethodNotAllowed
const DeleteServiceOrderMethodNotAllowedCode int = 405

/*
DeleteServiceOrderMethodNotAllowed Method Not allowed

swagger:response deleteServiceOrderMethodNotAllowed
*/
type DeleteServiceOrderMethodNotAllowed struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewDeleteServiceOrderMethodNotAllowed creates DeleteServiceOrderMethodNotAllowed with default headers values
func NewDeleteServiceOrderMethodNotAllowed() *DeleteServiceOrderMethodNotAllowed {

	return &DeleteServiceOrderMethodNotAllowed{}
}

// WithPayload adds the payload to the delete service order method not allowed response
func (o *DeleteServiceOrderMethodNotAllowed) WithPayload(payload *models.Error) *DeleteServiceOrderMethodNotAllowed {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the delete service order method not allowed response
func (o *DeleteServiceOrderMethodNotAllowed) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *DeleteServiceOrderMethodNotAllowed) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(405)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// DeleteServiceOrderConflictCode is the HTTP code returned for type DeleteServiceOrderConflict
const DeleteServiceOrderConflictCode int = 409

/*
DeleteServiceOrderConflict Conflict

swagger:response deleteServiceOrderConflict
*/
type DeleteServiceOrderConflict struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewDeleteServiceOrderConflict creates DeleteServiceOrderConflict with default headers values
func NewDeleteServiceOrderConflict() *DeleteServiceOrderConflict {

	return &DeleteServiceOrderConflict{}
}

// WithPayload adds the payload to the delete service order conflict response
func (o *DeleteServiceOrderConflict) WithPayload(payload *models.Error) *DeleteServiceOrderConflict {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the delete service order conflict response
func (o *DeleteServiceOrderConflict) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *DeleteServiceOrderConflict) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(409)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// DeleteServiceOrderInternalServerErrorCode is the HTTP code returned for type DeleteServiceOrderInternalServerError
const DeleteServiceOrderInternalServerErrorCode int = 500

/*
DeleteServiceOrderInternalServerError Internal Server Error

swagger:response deleteServiceOrderInternalServerError
*/
type DeleteServiceOrderInternalServerError struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewDeleteServiceOrderInternalServerError creates DeleteServiceOrderInternalServerError with default headers values
func NewDeleteServiceOrderInternalServerError() *DeleteServiceOrderInternalServerError {

	return &DeleteServiceOrderInternalServerError{}
}

// WithPayload adds the payload to the delete service order internal server error response
func (o *DeleteServiceOrderInternalServerError) WithPayload(payload *models.Error) *DeleteServiceOrderInternalServerError {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the delete service order internal server error response
func (o *DeleteServiceOrderInternalServerError) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *DeleteServiceOrderInternalServerError) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(500)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
